<?php
/**
 * FileSyncConfig
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Carbon
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * Carbon
 *
 * Connect external data to LLMs, no matter the source.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Carbon\Model;

use \ArrayAccess;
use \Carbon\ObjectSerializer;

/**
 * FileSyncConfig Class Doc Comment
 *
 * @category Class
 * @package  Carbon
 * @implements \ArrayAccess<string, mixed>
 */
class FileSyncConfig implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FileSyncConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'auto_synced_source_types' => '\Carbon\Model\HelpdeskFileTypes[]',
        'sync_attachments' => 'bool',
        'detect_audio_language' => 'bool',
        'transcription_service' => '\Carbon\Model\TranscriptionServiceNullable',
        'split_rows' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'auto_synced_source_types' => null,
        'sync_attachments' => null,
        'detect_audio_language' => null,
        'transcription_service' => null,
        'split_rows' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'auto_synced_source_types' => false,
		'sync_attachments' => false,
		'detect_audio_language' => false,
		'transcription_service' => true,
		'split_rows' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_synced_source_types' => 'auto_synced_source_types',
        'sync_attachments' => 'sync_attachments',
        'detect_audio_language' => 'detect_audio_language',
        'transcription_service' => 'transcription_service',
        'split_rows' => 'split_rows'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_synced_source_types' => 'setAutoSyncedSourceTypes',
        'sync_attachments' => 'setSyncAttachments',
        'detect_audio_language' => 'setDetectAudioLanguage',
        'transcription_service' => 'setTranscriptionService',
        'split_rows' => 'setSplitRows'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_synced_source_types' => 'getAutoSyncedSourceTypes',
        'sync_attachments' => 'getSyncAttachments',
        'detect_audio_language' => 'getDetectAudioLanguage',
        'transcription_service' => 'getTranscriptionService',
        'split_rows' => 'getSplitRows'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('auto_synced_source_types', $data ?? [], null);
        $this->setIfExists('sync_attachments', $data ?? [], false);
        $this->setIfExists('detect_audio_language', $data ?? [], false);
        $this->setIfExists('transcription_service', $data ?? [], null);
        $this->setIfExists('split_rows', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_synced_source_types
     *
     * @return \Carbon\Model\HelpdeskFileTypes[]|null
     */
    public function getAutoSyncedSourceTypes()
    {
        return $this->container['auto_synced_source_types'];
    }

    /**
     * Sets auto_synced_source_types
     *
     * @param \Carbon\Model\HelpdeskFileTypes[]|null $auto_synced_source_types File types to automatically sync when the data source connects. Only a subset of file types can be          controlled. If not supported, then they will always be synced
     *
     * @return self
     */
    public function setAutoSyncedSourceTypes($auto_synced_source_types)
    {

        if (is_null($auto_synced_source_types)) {
            throw new \InvalidArgumentException('non-nullable auto_synced_source_types cannot be null');
        }

        $this->container['auto_synced_source_types'] = $auto_synced_source_types;

        return $this;
    }

    /**
     * Gets sync_attachments
     *
     * @return bool|null
     */
    public function getSyncAttachments()
    {
        return $this->container['sync_attachments'];
    }

    /**
     * Sets sync_attachments
     *
     * @param bool|null $sync_attachments Automatically sync attachments from files where supported. Currently applies to Helpdesk Tickets
     *
     * @return self
     */
    public function setSyncAttachments($sync_attachments)
    {

        if (is_null($sync_attachments)) {
            throw new \InvalidArgumentException('non-nullable sync_attachments cannot be null');
        }

        $this->container['sync_attachments'] = $sync_attachments;

        return $this;
    }

    /**
     * Gets detect_audio_language
     *
     * @return bool|null
     */
    public function getDetectAudioLanguage()
    {
        return $this->container['detect_audio_language'];
    }

    /**
     * Sets detect_audio_language
     *
     * @param bool|null $detect_audio_language Detect audio language before transcription for audio files
     *
     * @return self
     */
    public function setDetectAudioLanguage($detect_audio_language)
    {

        if (is_null($detect_audio_language)) {
            throw new \InvalidArgumentException('non-nullable detect_audio_language cannot be null');
        }

        $this->container['detect_audio_language'] = $detect_audio_language;

        return $this;
    }

    /**
     * Gets transcription_service
     *
     * @return \Carbon\Model\TranscriptionServiceNullable|null
     */
    public function getTranscriptionService()
    {
        return $this->container['transcription_service'];
    }

    /**
     * Sets transcription_service
     *
     * @param \Carbon\Model\TranscriptionServiceNullable|null $transcription_service transcription_service
     *
     * @return self
     */
    public function setTranscriptionService($transcription_service)
    {

        if (is_null($transcription_service)) {
            array_push($this->openAPINullablesSetToNull, 'transcription_service');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transcription_service', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['transcription_service'] = $transcription_service;

        return $this;
    }

    /**
     * Gets split_rows
     *
     * @return bool|null
     */
    public function getSplitRows()
    {
        return $this->container['split_rows'];
    }

    /**
     * Sets split_rows
     *
     * @param bool|null $split_rows Whether to split tabular rows into chunks. Currently only valid for CSV, TSV, and XLSX files.
     *
     * @return self
     */
    public function setSplitRows($split_rows)
    {

        if (is_null($split_rows)) {
            throw new \InvalidArgumentException('non-nullable split_rows cannot be null');
        }

        $this->container['split_rows'] = $split_rows;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


