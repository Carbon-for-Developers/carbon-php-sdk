<?php
/**
 * AuthenticationProperty
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Carbon
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * Carbon
 *
 * Connect external data to LLMs, no matter the source.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Carbon\Model;

use \ArrayAccess;
use \Carbon\ObjectSerializer;

/**
 * AuthenticationProperty Class Doc Comment
 *
 * @category Class
 * @package  Carbon
 * @implements \ArrayAccess<string, mixed>
 */
class AuthenticationProperty implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Authentication_Property';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'source' => 'mixed',
        'access_token' => 'string',
        'refresh_token' => 'string',
        'workspace_id' => 'string',
        'tenant_name' => 'string',
        'site_name' => 'string',
        'subdomain' => 'string',
        'access_token_secret' => 'string',
        'username' => 'string',
        'zotero_id' => 'string',
        'organization_name' => 'string',
        'domain' => 'string',
        'api_key' => 'string',
        'access_key' => 'string',
        'access_key_secret' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'source' => null,
        'access_token' => null,
        'refresh_token' => null,
        'workspace_id' => null,
        'tenant_name' => null,
        'site_name' => null,
        'subdomain' => null,
        'access_token_secret' => null,
        'username' => null,
        'zotero_id' => null,
        'organization_name' => null,
        'domain' => null,
        'api_key' => null,
        'access_key' => null,
        'access_key_secret' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'source' => true,
		'access_token' => false,
		'refresh_token' => true,
		'workspace_id' => false,
		'tenant_name' => false,
		'site_name' => false,
		'subdomain' => false,
		'access_token_secret' => false,
		'username' => false,
		'zotero_id' => false,
		'organization_name' => false,
		'domain' => false,
		'api_key' => false,
		'access_key' => false,
		'access_key_secret' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'source' => 'source',
        'access_token' => 'access_token',
        'refresh_token' => 'refresh_token',
        'workspace_id' => 'workspace_id',
        'tenant_name' => 'tenant_name',
        'site_name' => 'site_name',
        'subdomain' => 'subdomain',
        'access_token_secret' => 'access_token_secret',
        'username' => 'username',
        'zotero_id' => 'zotero_id',
        'organization_name' => 'organization_name',
        'domain' => 'domain',
        'api_key' => 'api_key',
        'access_key' => 'access_key',
        'access_key_secret' => 'access_key_secret'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'source' => 'setSource',
        'access_token' => 'setAccessToken',
        'refresh_token' => 'setRefreshToken',
        'workspace_id' => 'setWorkspaceId',
        'tenant_name' => 'setTenantName',
        'site_name' => 'setSiteName',
        'subdomain' => 'setSubdomain',
        'access_token_secret' => 'setAccessTokenSecret',
        'username' => 'setUsername',
        'zotero_id' => 'setZoteroId',
        'organization_name' => 'setOrganizationName',
        'domain' => 'setDomain',
        'api_key' => 'setApiKey',
        'access_key' => 'setAccessKey',
        'access_key_secret' => 'setAccessKeySecret'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'source' => 'getSource',
        'access_token' => 'getAccessToken',
        'refresh_token' => 'getRefreshToken',
        'workspace_id' => 'getWorkspaceId',
        'tenant_name' => 'getTenantName',
        'site_name' => 'getSiteName',
        'subdomain' => 'getSubdomain',
        'access_token_secret' => 'getAccessTokenSecret',
        'username' => 'getUsername',
        'zotero_id' => 'getZoteroId',
        'organization_name' => 'getOrganizationName',
        'domain' => 'getDomain',
        'api_key' => 'getApiKey',
        'access_key' => 'getAccessKey',
        'access_key_secret' => 'getAccessKeySecret'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('access_token', $data ?? [], null);
        $this->setIfExists('refresh_token', $data ?? [], null);
        $this->setIfExists('workspace_id', $data ?? [], null);
        $this->setIfExists('tenant_name', $data ?? [], null);
        $this->setIfExists('site_name', $data ?? [], null);
        $this->setIfExists('subdomain', $data ?? [], null);
        $this->setIfExists('access_token_secret', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('zotero_id', $data ?? [], null);
        $this->setIfExists('organization_name', $data ?? [], null);
        $this->setIfExists('domain', $data ?? [], null);
        $this->setIfExists('api_key', $data ?? [], null);
        $this->setIfExists('access_key', $data ?? [], null);
        $this->setIfExists('access_key_secret', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['source'] === null) {
            $invalidProperties[] = "'source' can't be null";
        }
        if ($this->container['access_token'] === null) {
            $invalidProperties[] = "'access_token' can't be null";
        }
        if ($this->container['workspace_id'] === null) {
            $invalidProperties[] = "'workspace_id' can't be null";
        }
        if ($this->container['tenant_name'] === null) {
            $invalidProperties[] = "'tenant_name' can't be null";
        }
        if ($this->container['site_name'] === null) {
            $invalidProperties[] = "'site_name' can't be null";
        }
        if ($this->container['subdomain'] === null) {
            $invalidProperties[] = "'subdomain' can't be null";
        }
        if ($this->container['access_token_secret'] === null) {
            $invalidProperties[] = "'access_token_secret' can't be null";
        }
        if ($this->container['username'] === null) {
            $invalidProperties[] = "'username' can't be null";
        }
        if ($this->container['zotero_id'] === null) {
            $invalidProperties[] = "'zotero_id' can't be null";
        }
        if ($this->container['organization_name'] === null) {
            $invalidProperties[] = "'organization_name' can't be null";
        }
        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ($this->container['api_key'] === null) {
            $invalidProperties[] = "'api_key' can't be null";
        }
        if ($this->container['access_key'] === null) {
            $invalidProperties[] = "'access_key' can't be null";
        }
        if ($this->container['access_key_secret'] === null) {
            $invalidProperties[] = "'access_key_secret' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets source
     *
     * @return mixed
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param mixed $source source
     *
     * @return self
     */
    public function setSource($source)
    {

        if (is_null($source)) {
            array_push($this->openAPINullablesSetToNull, 'source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('source', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets access_token
     *
     * @return string
     */
    public function getAccessToken()
    {
        return $this->container['access_token'];
    }

    /**
     * Sets access_token
     *
     * @param string $access_token access_token
     *
     * @return self
     */
    public function setAccessToken($access_token)
    {

        if (is_null($access_token)) {
            throw new \InvalidArgumentException('non-nullable access_token cannot be null');
        }

        $this->container['access_token'] = $access_token;

        return $this;
    }

    /**
     * Gets refresh_token
     *
     * @return string|null
     */
    public function getRefreshToken()
    {
        return $this->container['refresh_token'];
    }

    /**
     * Sets refresh_token
     *
     * @param string|null $refresh_token refresh_token
     *
     * @return self
     */
    public function setRefreshToken($refresh_token)
    {

        if (is_null($refresh_token)) {
            array_push($this->openAPINullablesSetToNull, 'refresh_token');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('refresh_token', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['refresh_token'] = $refresh_token;

        return $this;
    }

    /**
     * Gets workspace_id
     *
     * @return string
     */
    public function getWorkspaceId()
    {
        return $this->container['workspace_id'];
    }

    /**
     * Sets workspace_id
     *
     * @param string $workspace_id workspace_id
     *
     * @return self
     */
    public function setWorkspaceId($workspace_id)
    {

        if (is_null($workspace_id)) {
            throw new \InvalidArgumentException('non-nullable workspace_id cannot be null');
        }

        $this->container['workspace_id'] = $workspace_id;

        return $this;
    }

    /**
     * Gets tenant_name
     *
     * @return string
     */
    public function getTenantName()
    {
        return $this->container['tenant_name'];
    }

    /**
     * Sets tenant_name
     *
     * @param string $tenant_name tenant_name
     *
     * @return self
     */
    public function setTenantName($tenant_name)
    {

        if (is_null($tenant_name)) {
            throw new \InvalidArgumentException('non-nullable tenant_name cannot be null');
        }

        $this->container['tenant_name'] = $tenant_name;

        return $this;
    }

    /**
     * Gets site_name
     *
     * @return string
     */
    public function getSiteName()
    {
        return $this->container['site_name'];
    }

    /**
     * Sets site_name
     *
     * @param string $site_name site_name
     *
     * @return self
     */
    public function setSiteName($site_name)
    {

        if (is_null($site_name)) {
            throw new \InvalidArgumentException('non-nullable site_name cannot be null');
        }

        $this->container['site_name'] = $site_name;

        return $this;
    }

    /**
     * Gets subdomain
     *
     * @return string
     */
    public function getSubdomain()
    {
        return $this->container['subdomain'];
    }

    /**
     * Sets subdomain
     *
     * @param string $subdomain subdomain
     *
     * @return self
     */
    public function setSubdomain($subdomain)
    {

        if (is_null($subdomain)) {
            throw new \InvalidArgumentException('non-nullable subdomain cannot be null');
        }

        $this->container['subdomain'] = $subdomain;

        return $this;
    }

    /**
     * Gets access_token_secret
     *
     * @return string
     */
    public function getAccessTokenSecret()
    {
        return $this->container['access_token_secret'];
    }

    /**
     * Sets access_token_secret
     *
     * @param string $access_token_secret access_token_secret
     *
     * @return self
     */
    public function setAccessTokenSecret($access_token_secret)
    {

        if (is_null($access_token_secret)) {
            throw new \InvalidArgumentException('non-nullable access_token_secret cannot be null');
        }

        $this->container['access_token_secret'] = $access_token_secret;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return self
     */
    public function setUsername($username)
    {

        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }

        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets zotero_id
     *
     * @return string
     */
    public function getZoteroId()
    {
        return $this->container['zotero_id'];
    }

    /**
     * Sets zotero_id
     *
     * @param string $zotero_id zotero_id
     *
     * @return self
     */
    public function setZoteroId($zotero_id)
    {

        if (is_null($zotero_id)) {
            throw new \InvalidArgumentException('non-nullable zotero_id cannot be null');
        }

        $this->container['zotero_id'] = $zotero_id;

        return $this;
    }

    /**
     * Gets organization_name
     *
     * @return string
     */
    public function getOrganizationName()
    {
        return $this->container['organization_name'];
    }

    /**
     * Sets organization_name
     *
     * @param string $organization_name organization_name
     *
     * @return self
     */
    public function setOrganizationName($organization_name)
    {

        if (is_null($organization_name)) {
            throw new \InvalidArgumentException('non-nullable organization_name cannot be null');
        }

        $this->container['organization_name'] = $organization_name;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {

        if (is_null($domain)) {
            throw new \InvalidArgumentException('non-nullable domain cannot be null');
        }

        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets api_key
     *
     * @return string
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string $api_key api_key
     *
     * @return self
     */
    public function setApiKey($api_key)
    {

        if (is_null($api_key)) {
            throw new \InvalidArgumentException('non-nullable api_key cannot be null');
        }

        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets access_key
     *
     * @return string
     */
    public function getAccessKey()
    {
        return $this->container['access_key'];
    }

    /**
     * Sets access_key
     *
     * @param string $access_key access_key
     *
     * @return self
     */
    public function setAccessKey($access_key)
    {

        if (is_null($access_key)) {
            throw new \InvalidArgumentException('non-nullable access_key cannot be null');
        }

        $this->container['access_key'] = $access_key;

        return $this;
    }

    /**
     * Gets access_key_secret
     *
     * @return string
     */
    public function getAccessKeySecret()
    {
        return $this->container['access_key_secret'];
    }

    /**
     * Sets access_key_secret
     *
     * @param string $access_key_secret access_key_secret
     *
     * @return self
     */
    public function setAccessKeySecret($access_key_secret)
    {

        if (is_null($access_key_secret)) {
            throw new \InvalidArgumentException('non-nullable access_key_secret cannot be null');
        }

        $this->container['access_key_secret'] = $access_key_secret;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


