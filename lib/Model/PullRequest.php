<?php
/**
 * PullRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Carbon
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * Carbon
 *
 * Connect external data to LLMs, no matter the source.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Carbon\Model;

use \ArrayAccess;
use \Carbon\ObjectSerializer;

/**
 * PullRequest Class Doc Comment
 *
 * @category Class
 * @package  Carbon
 * @implements \ArrayAccess<string, mixed>
 */
class PullRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PullRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'title' => 'string',
        'id' => 'int',
        'url' => 'string',
        'number' => 'int',
        'state' => '\Carbon\Model\PRState',
        'user' => '\Carbon\Model\User',
        'created_at' => 'string',
        'updated_at' => 'string',
        'closed_at' => 'string',
        'merged_at' => 'string',
        'requested_reviewers' => '\Carbon\Model\User[]',
        'requested_teams' => '\Carbon\Model\Team[]',
        'labels' => '\Carbon\Model\Label[]',
        'draft' => 'bool',
        'head' => '\Carbon\Model\HeadOrBase',
        'base' => '\Carbon\Model\HeadOrBase',
        'remote_data' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'title' => null,
        'id' => null,
        'url' => null,
        'number' => null,
        'state' => null,
        'user' => null,
        'created_at' => null,
        'updated_at' => null,
        'closed_at' => null,
        'merged_at' => null,
        'requested_reviewers' => null,
        'requested_teams' => null,
        'labels' => null,
        'draft' => null,
        'head' => null,
        'base' => null,
        'remote_data' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'title' => false,
		'id' => false,
		'url' => false,
		'number' => false,
		'state' => false,
		'user' => false,
		'created_at' => false,
		'updated_at' => false,
		'closed_at' => true,
		'merged_at' => true,
		'requested_reviewers' => false,
		'requested_teams' => false,
		'labels' => false,
		'draft' => false,
		'head' => false,
		'base' => false,
		'remote_data' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
        'id' => 'id',
        'url' => 'url',
        'number' => 'number',
        'state' => 'state',
        'user' => 'user',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'closed_at' => 'closed_at',
        'merged_at' => 'merged_at',
        'requested_reviewers' => 'requested_reviewers',
        'requested_teams' => 'requested_teams',
        'labels' => 'labels',
        'draft' => 'draft',
        'head' => 'head',
        'base' => 'base',
        'remote_data' => 'remote_data'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
        'id' => 'setId',
        'url' => 'setUrl',
        'number' => 'setNumber',
        'state' => 'setState',
        'user' => 'setUser',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'closed_at' => 'setClosedAt',
        'merged_at' => 'setMergedAt',
        'requested_reviewers' => 'setRequestedReviewers',
        'requested_teams' => 'setRequestedTeams',
        'labels' => 'setLabels',
        'draft' => 'setDraft',
        'head' => 'setHead',
        'base' => 'setBase',
        'remote_data' => 'setRemoteData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
        'id' => 'getId',
        'url' => 'getUrl',
        'number' => 'getNumber',
        'state' => 'getState',
        'user' => 'getUser',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'closed_at' => 'getClosedAt',
        'merged_at' => 'getMergedAt',
        'requested_reviewers' => 'getRequestedReviewers',
        'requested_teams' => 'getRequestedTeams',
        'labels' => 'getLabels',
        'draft' => 'getDraft',
        'head' => 'getHead',
        'base' => 'getBase',
        'remote_data' => 'getRemoteData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('closed_at', $data ?? [], null);
        $this->setIfExists('merged_at', $data ?? [], null);
        $this->setIfExists('requested_reviewers', $data ?? [], null);
        $this->setIfExists('requested_teams', $data ?? [], null);
        $this->setIfExists('labels', $data ?? [], null);
        $this->setIfExists('draft', $data ?? [], null);
        $this->setIfExists('head', $data ?? [], null);
        $this->setIfExists('base', $data ?? [], null);
        $this->setIfExists('remote_data', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['closed_at'] === null) {
            $invalidProperties[] = "'closed_at' can't be null";
        }
        if ($this->container['merged_at'] === null) {
            $invalidProperties[] = "'merged_at' can't be null";
        }
        if ($this->container['requested_reviewers'] === null) {
            $invalidProperties[] = "'requested_reviewers' can't be null";
        }
        if ($this->container['requested_teams'] === null) {
            $invalidProperties[] = "'requested_teams' can't be null";
        }
        if ($this->container['labels'] === null) {
            $invalidProperties[] = "'labels' can't be null";
        }
        if ($this->container['draft'] === null) {
            $invalidProperties[] = "'draft' can't be null";
        }
        if ($this->container['head'] === null) {
            $invalidProperties[] = "'head' can't be null";
        }
        if ($this->container['base'] === null) {
            $invalidProperties[] = "'base' can't be null";
        }
        if ($this->container['remote_data'] === null) {
            $invalidProperties[] = "'remote_data' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return self
     */
    public function setTitle($title)
    {

        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return self
     */
    public function setUrl($url)
    {

        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }

        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number number
     *
     * @return self
     */
    public function setNumber($number)
    {

        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }

        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \Carbon\Model\PRState
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \Carbon\Model\PRState $state state
     *
     * @return self
     */
    public function setState($state)
    {

        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \Carbon\Model\User
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \Carbon\Model\User $user user
     *
     * @return self
     */
    public function setUser($user)
    {

        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }

        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {

        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }

        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {

        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }

        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets closed_at
     *
     * @return string
     */
    public function getClosedAt()
    {
        return $this->container['closed_at'];
    }

    /**
     * Sets closed_at
     *
     * @param string $closed_at closed_at
     *
     * @return self
     */
    public function setClosedAt($closed_at)
    {

        if (is_null($closed_at)) {
            array_push($this->openAPINullablesSetToNull, 'closed_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('closed_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['closed_at'] = $closed_at;

        return $this;
    }

    /**
     * Gets merged_at
     *
     * @return string
     */
    public function getMergedAt()
    {
        return $this->container['merged_at'];
    }

    /**
     * Sets merged_at
     *
     * @param string $merged_at merged_at
     *
     * @return self
     */
    public function setMergedAt($merged_at)
    {

        if (is_null($merged_at)) {
            array_push($this->openAPINullablesSetToNull, 'merged_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merged_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['merged_at'] = $merged_at;

        return $this;
    }

    /**
     * Gets requested_reviewers
     *
     * @return \Carbon\Model\User[]
     */
    public function getRequestedReviewers()
    {
        return $this->container['requested_reviewers'];
    }

    /**
     * Sets requested_reviewers
     *
     * @param \Carbon\Model\User[] $requested_reviewers requested_reviewers
     *
     * @return self
     */
    public function setRequestedReviewers($requested_reviewers)
    {

        if (is_null($requested_reviewers)) {
            throw new \InvalidArgumentException('non-nullable requested_reviewers cannot be null');
        }

        $this->container['requested_reviewers'] = $requested_reviewers;

        return $this;
    }

    /**
     * Gets requested_teams
     *
     * @return \Carbon\Model\Team[]
     */
    public function getRequestedTeams()
    {
        return $this->container['requested_teams'];
    }

    /**
     * Sets requested_teams
     *
     * @param \Carbon\Model\Team[] $requested_teams requested_teams
     *
     * @return self
     */
    public function setRequestedTeams($requested_teams)
    {

        if (is_null($requested_teams)) {
            throw new \InvalidArgumentException('non-nullable requested_teams cannot be null');
        }

        $this->container['requested_teams'] = $requested_teams;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \Carbon\Model\Label[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \Carbon\Model\Label[] $labels labels
     *
     * @return self
     */
    public function setLabels($labels)
    {

        if (is_null($labels)) {
            throw new \InvalidArgumentException('non-nullable labels cannot be null');
        }

        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets draft
     *
     * @return bool
     */
    public function getDraft()
    {
        return $this->container['draft'];
    }

    /**
     * Sets draft
     *
     * @param bool $draft draft
     *
     * @return self
     */
    public function setDraft($draft)
    {

        if (is_null($draft)) {
            throw new \InvalidArgumentException('non-nullable draft cannot be null');
        }

        $this->container['draft'] = $draft;

        return $this;
    }

    /**
     * Gets head
     *
     * @return \Carbon\Model\HeadOrBase
     */
    public function getHead()
    {
        return $this->container['head'];
    }

    /**
     * Sets head
     *
     * @param \Carbon\Model\HeadOrBase $head head
     *
     * @return self
     */
    public function setHead($head)
    {

        if (is_null($head)) {
            throw new \InvalidArgumentException('non-nullable head cannot be null');
        }

        $this->container['head'] = $head;

        return $this;
    }

    /**
     * Gets base
     *
     * @return \Carbon\Model\HeadOrBase
     */
    public function getBase()
    {
        return $this->container['base'];
    }

    /**
     * Sets base
     *
     * @param \Carbon\Model\HeadOrBase $base base
     *
     * @return self
     */
    public function setBase($base)
    {

        if (is_null($base)) {
            throw new \InvalidArgumentException('non-nullable base cannot be null');
        }

        $this->container['base'] = $base;

        return $this;
    }

    /**
     * Gets remote_data
     *
     * @return object
     */
    public function getRemoteData()
    {
        return $this->container['remote_data'];
    }

    /**
     * Sets remote_data
     *
     * @param object $remote_data remote_data
     *
     * @return self
     */
    public function setRemoteData($remote_data)
    {

        if (is_null($remote_data)) {
            array_push($this->openAPINullablesSetToNull, 'remote_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remote_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['remote_data'] = $remote_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


