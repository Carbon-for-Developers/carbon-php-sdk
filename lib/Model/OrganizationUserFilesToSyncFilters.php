<?php
/**
 * OrganizationUserFilesToSyncFilters
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Carbon
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * Carbon
 *
 * Connect external data to LLMs, no matter the source.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Carbon\Model;

use \ArrayAccess;
use \Carbon\ObjectSerializer;

/**
 * OrganizationUserFilesToSyncFilters Class Doc Comment
 *
 * @category Class
 * @package  Carbon
 * @implements \ArrayAccess<string, mixed>
 */
class OrganizationUserFilesToSyncFilters implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrganizationUserFilesToSyncFilters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'tags' => 'array<string,\Carbon\Model\Tags1>',
        'source' => '\Carbon\Model\SourceProperty',
        'name' => 'string',
        'tags_v2' => 'object',
        'ids' => 'int[]',
        'external_file_ids' => 'string[]',
        'sync_statuses' => '\Carbon\Model\ExternalFileSyncStatuses[]',
        'parent_file_ids' => 'int[]',
        'organization_user_data_source_id' => 'int[]',
        'embedding_generators' => '\Carbon\Model\EmbeddingGenerators[]',
        'root_files_only' => 'bool',
        'include_all_children' => 'bool',
        'non_synced_only' => 'bool',
        'request_ids' => 'string[]',
        'sync_error_message' => 'string',
        'include_containers' => 'bool',
        'external_urls' => 'string[]',
        'file_types_at_source' => '\Carbon\Model\HelpdeskFileTypes[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'tags' => null,
        'source' => null,
        'name' => null,
        'tags_v2' => null,
        'ids' => null,
        'external_file_ids' => null,
        'sync_statuses' => null,
        'parent_file_ids' => null,
        'organization_user_data_source_id' => null,
        'embedding_generators' => null,
        'root_files_only' => null,
        'include_all_children' => null,
        'non_synced_only' => null,
        'request_ids' => null,
        'sync_error_message' => null,
        'include_containers' => null,
        'external_urls' => null,
        'file_types_at_source' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'tags' => true,
		'source' => true,
		'name' => true,
		'tags_v2' => true,
		'ids' => true,
		'external_file_ids' => true,
		'sync_statuses' => true,
		'parent_file_ids' => true,
		'organization_user_data_source_id' => true,
		'embedding_generators' => true,
		'root_files_only' => true,
		'include_all_children' => false,
		'non_synced_only' => false,
		'request_ids' => true,
		'sync_error_message' => true,
		'include_containers' => true,
		'external_urls' => true,
		'file_types_at_source' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tags' => 'tags',
        'source' => 'source',
        'name' => 'name',
        'tags_v2' => 'tags_v2',
        'ids' => 'ids',
        'external_file_ids' => 'external_file_ids',
        'sync_statuses' => 'sync_statuses',
        'parent_file_ids' => 'parent_file_ids',
        'organization_user_data_source_id' => 'organization_user_data_source_id',
        'embedding_generators' => 'embedding_generators',
        'root_files_only' => 'root_files_only',
        'include_all_children' => 'include_all_children',
        'non_synced_only' => 'non_synced_only',
        'request_ids' => 'request_ids',
        'sync_error_message' => 'sync_error_message',
        'include_containers' => 'include_containers',
        'external_urls' => 'external_urls',
        'file_types_at_source' => 'file_types_at_source'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tags' => 'setTags',
        'source' => 'setSource',
        'name' => 'setName',
        'tags_v2' => 'setTagsV2',
        'ids' => 'setIds',
        'external_file_ids' => 'setExternalFileIds',
        'sync_statuses' => 'setSyncStatuses',
        'parent_file_ids' => 'setParentFileIds',
        'organization_user_data_source_id' => 'setOrganizationUserDataSourceId',
        'embedding_generators' => 'setEmbeddingGenerators',
        'root_files_only' => 'setRootFilesOnly',
        'include_all_children' => 'setIncludeAllChildren',
        'non_synced_only' => 'setNonSyncedOnly',
        'request_ids' => 'setRequestIds',
        'sync_error_message' => 'setSyncErrorMessage',
        'include_containers' => 'setIncludeContainers',
        'external_urls' => 'setExternalUrls',
        'file_types_at_source' => 'setFileTypesAtSource'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tags' => 'getTags',
        'source' => 'getSource',
        'name' => 'getName',
        'tags_v2' => 'getTagsV2',
        'ids' => 'getIds',
        'external_file_ids' => 'getExternalFileIds',
        'sync_statuses' => 'getSyncStatuses',
        'parent_file_ids' => 'getParentFileIds',
        'organization_user_data_source_id' => 'getOrganizationUserDataSourceId',
        'embedding_generators' => 'getEmbeddingGenerators',
        'root_files_only' => 'getRootFilesOnly',
        'include_all_children' => 'getIncludeAllChildren',
        'non_synced_only' => 'getNonSyncedOnly',
        'request_ids' => 'getRequestIds',
        'sync_error_message' => 'getSyncErrorMessage',
        'include_containers' => 'getIncludeContainers',
        'external_urls' => 'getExternalUrls',
        'file_types_at_source' => 'getFileTypesAtSource'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('tags_v2', $data ?? [], null);
        $this->setIfExists('ids', $data ?? [], null);
        $this->setIfExists('external_file_ids', $data ?? [], null);
        $this->setIfExists('sync_statuses', $data ?? [], null);
        $this->setIfExists('parent_file_ids', $data ?? [], null);
        $this->setIfExists('organization_user_data_source_id', $data ?? [], null);
        $this->setIfExists('embedding_generators', $data ?? [], null);
        $this->setIfExists('root_files_only', $data ?? [], null);
        $this->setIfExists('include_all_children', $data ?? [], false);
        $this->setIfExists('non_synced_only', $data ?? [], false);
        $this->setIfExists('request_ids', $data ?? [], null);
        $this->setIfExists('sync_error_message', $data ?? [], null);
        $this->setIfExists('include_containers', $data ?? [], null);
        $this->setIfExists('external_urls', $data ?? [], null);
        $this->setIfExists('file_types_at_source', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['request_ids']) && (count($this->container['request_ids']) > 100)) {
            $invalidProperties[] = "invalid value for 'request_ids', number of items must be less than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tags
     *
     * @return array<string,\Carbon\Model\Tags1>|null
     * @deprecated
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param array<string,\Carbon\Model\Tags1>|null $tags tags
     *
     * @return self
     * @deprecated
     */
    public function setTags($tags)
    {

        if (is_null($tags)) {
            array_push($this->openAPINullablesSetToNull, 'tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \Carbon\Model\SourceProperty|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \Carbon\Model\SourceProperty|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {

        if (is_null($source)) {
            array_push($this->openAPINullablesSetToNull, 'source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('source', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The name of the file. The query will return files with names that contain this string.
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets tags_v2
     *
     * @return object|null
     */
    public function getTagsV2()
    {
        return $this->container['tags_v2'];
    }

    /**
     * Sets tags_v2
     *
     * @param object|null $tags_v2 Tags to filter by. Supports logical AND and OR operations. Input should be like below:         {             \"OR\": [                 {                 \"key\": \"subject\",                 \"value\": \"holy-bible\",                 \"negate\": false                 },                 {                     \"key\": \"person-of-interest\",                     \"value\": \"jesus christ\",                     \"negate\": false                 },                 {                     \"key\": \"genre\",                     \"value\": \"fiction\",                     \"negate\": true                 }                 {                     \"AND\": [                         {                             \"key\": \"subject\",                             \"value\": \"tao-te-ching\",                             \"negate\": true                         },                         {                             \"key\": \"author\",                             \"value\": \"lao-tzu\",                             \"negate\": false                         }                     ]                 }             ]         }         For a single filter, the filter block can be placed within either an \"AND\" or \"OR\" block.
     *
     * @return self
     */
    public function setTagsV2($tags_v2)
    {

        if (is_null($tags_v2)) {
            array_push($this->openAPINullablesSetToNull, 'tags_v2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tags_v2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['tags_v2'] = $tags_v2;

        return $this;
    }

    /**
     * Gets ids
     *
     * @return int[]|null
     */
    public function getIds()
    {
        return $this->container['ids'];
    }

    /**
     * Sets ids
     *
     * @param int[]|null $ids The IDs of the files. The query will return files with these IDs.
     *
     * @return self
     */
    public function setIds($ids)
    {

        if (is_null($ids)) {
            array_push($this->openAPINullablesSetToNull, 'ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ids', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['ids'] = $ids;

        return $this;
    }

    /**
     * Gets external_file_ids
     *
     * @return string[]|null
     */
    public function getExternalFileIds()
    {
        return $this->container['external_file_ids'];
    }

    /**
     * Sets external_file_ids
     *
     * @param string[]|null $external_file_ids The external file IDs of the files. The query will return files with these external file IDs.
     *
     * @return self
     */
    public function setExternalFileIds($external_file_ids)
    {

        if (is_null($external_file_ids)) {
            array_push($this->openAPINullablesSetToNull, 'external_file_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_file_ids', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['external_file_ids'] = $external_file_ids;

        return $this;
    }

    /**
     * Gets sync_statuses
     *
     * @return \Carbon\Model\ExternalFileSyncStatuses[]|null
     */
    public function getSyncStatuses()
    {
        return $this->container['sync_statuses'];
    }

    /**
     * Sets sync_statuses
     *
     * @param \Carbon\Model\ExternalFileSyncStatuses[]|null $sync_statuses The sync statuses of the files. The query will return files with these sync statuses.
     *
     * @return self
     */
    public function setSyncStatuses($sync_statuses)
    {

        if (is_null($sync_statuses)) {
            array_push($this->openAPINullablesSetToNull, 'sync_statuses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sync_statuses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['sync_statuses'] = $sync_statuses;

        return $this;
    }

    /**
     * Gets parent_file_ids
     *
     * @return int[]|null
     * @deprecated
     */
    public function getParentFileIds()
    {
        return $this->container['parent_file_ids'];
    }

    /**
     * Sets parent_file_ids
     *
     * @param int[]|null $parent_file_ids parent_file_ids
     *
     * @return self
     * @deprecated
     */
    public function setParentFileIds($parent_file_ids)
    {

        if (is_null($parent_file_ids)) {
            array_push($this->openAPINullablesSetToNull, 'parent_file_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_file_ids', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['parent_file_ids'] = $parent_file_ids;

        return $this;
    }

    /**
     * Gets organization_user_data_source_id
     *
     * @return int[]|null
     */
    public function getOrganizationUserDataSourceId()
    {
        return $this->container['organization_user_data_source_id'];
    }

    /**
     * Sets organization_user_data_source_id
     *
     * @param int[]|null $organization_user_data_source_id The organization user data source IDs of the files. The query will return files with these organization user data source IDs.
     *
     * @return self
     */
    public function setOrganizationUserDataSourceId($organization_user_data_source_id)
    {

        if (is_null($organization_user_data_source_id)) {
            array_push($this->openAPINullablesSetToNull, 'organization_user_data_source_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('organization_user_data_source_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['organization_user_data_source_id'] = $organization_user_data_source_id;

        return $this;
    }

    /**
     * Gets embedding_generators
     *
     * @return \Carbon\Model\EmbeddingGenerators[]|null
     */
    public function getEmbeddingGenerators()
    {
        return $this->container['embedding_generators'];
    }

    /**
     * Sets embedding_generators
     *
     * @param \Carbon\Model\EmbeddingGenerators[]|null $embedding_generators The embedding generators of the files. The query will return files with these embedding generators.
     *
     * @return self
     */
    public function setEmbeddingGenerators($embedding_generators)
    {

        if (is_null($embedding_generators)) {
            array_push($this->openAPINullablesSetToNull, 'embedding_generators');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('embedding_generators', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['embedding_generators'] = $embedding_generators;

        return $this;
    }

    /**
     * Gets root_files_only
     *
     * @return bool|null
     */
    public function getRootFilesOnly()
    {
        return $this->container['root_files_only'];
    }

    /**
     * Sets root_files_only
     *
     * @param bool|null $root_files_only If true, the query will return only root files. Cannot be true if parent_file_ids or include_all_children is specified.
     *
     * @return self
     */
    public function setRootFilesOnly($root_files_only)
    {

        if (is_null($root_files_only)) {
            array_push($this->openAPINullablesSetToNull, 'root_files_only');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('root_files_only', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['root_files_only'] = $root_files_only;

        return $this;
    }

    /**
     * Gets include_all_children
     *
     * @return bool|null
     */
    public function getIncludeAllChildren()
    {
        return $this->container['include_all_children'];
    }

    /**
     * Sets include_all_children
     *
     * @param bool|null $include_all_children If true, the query will return all descendents of the specified parent_file_ids.
     *
     * @return self
     */
    public function setIncludeAllChildren($include_all_children)
    {

        if (is_null($include_all_children)) {
            throw new \InvalidArgumentException('non-nullable include_all_children cannot be null');
        }

        $this->container['include_all_children'] = $include_all_children;

        return $this;
    }

    /**
     * Gets non_synced_only
     *
     * @return bool|null
     */
    public function getNonSyncedOnly()
    {
        return $this->container['non_synced_only'];
    }

    /**
     * Sets non_synced_only
     *
     * @param bool|null $non_synced_only If true, the query will return only files that have not been synced yet.
     *
     * @return self
     */
    public function setNonSyncedOnly($non_synced_only)
    {

        if (is_null($non_synced_only)) {
            throw new \InvalidArgumentException('non-nullable non_synced_only cannot be null');
        }

        $this->container['non_synced_only'] = $non_synced_only;

        return $this;
    }

    /**
     * Gets request_ids
     *
     * @return string[]|null
     */
    public function getRequestIds()
    {
        return $this->container['request_ids'];
    }

    /**
     * Sets request_ids
     *
     * @param string[]|null $request_ids Filter by request ID(s) which were used to sync the files
     *
     * @return self
     */
    public function setRequestIds($request_ids)
    {

        if (!is_null($request_ids) && (count($request_ids) > 100)) {
            throw new \InvalidArgumentException('invalid value for $request_ids when calling OrganizationUserFilesToSyncFilters., number of items must be less than or equal to 100.');
        }

        if (is_null($request_ids)) {
            array_push($this->openAPINullablesSetToNull, 'request_ids');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('request_ids', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['request_ids'] = $request_ids;

        return $this;
    }

    /**
     * Gets sync_error_message
     *
     * @return string|null
     */
    public function getSyncErrorMessage()
    {
        return $this->container['sync_error_message'];
    }

    /**
     * Sets sync_error_message
     *
     * @param string|null $sync_error_message The error message of the file. The query will return files with error messages that contain this string. To search for files with no error message, use an empty string.
     *
     * @return self
     */
    public function setSyncErrorMessage($sync_error_message)
    {

        if (is_null($sync_error_message)) {
            array_push($this->openAPINullablesSetToNull, 'sync_error_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sync_error_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['sync_error_message'] = $sync_error_message;

        return $this;
    }

    /**
     * Gets include_containers
     *
     * @return bool|null
     */
    public function getIncludeContainers()
    {
        return $this->container['include_containers'];
    }

    /**
     * Sets include_containers
     *
     * @param bool|null $include_containers If true, the query will return containers in the response. Containers are files that group other files together and have no content themselves. Default behavior is to include containers.
     *
     * @return self
     */
    public function setIncludeContainers($include_containers)
    {

        if (is_null($include_containers)) {
            array_push($this->openAPINullablesSetToNull, 'include_containers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('include_containers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['include_containers'] = $include_containers;

        return $this;
    }

    /**
     * Gets external_urls
     *
     * @return string[]|null
     */
    public function getExternalUrls()
    {
        return $this->container['external_urls'];
    }

    /**
     * Sets external_urls
     *
     * @param string[]|null $external_urls The external URLs of the files. The query will return files with these external URLs.
     *
     * @return self
     */
    public function setExternalUrls($external_urls)
    {

        if (is_null($external_urls)) {
            array_push($this->openAPINullablesSetToNull, 'external_urls');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('external_urls', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['external_urls'] = $external_urls;

        return $this;
    }

    /**
     * Gets file_types_at_source
     *
     * @return \Carbon\Model\HelpdeskFileTypes[]|null
     */
    public function getFileTypesAtSource()
    {
        return $this->container['file_types_at_source'];
    }

    /**
     * Sets file_types_at_source
     *
     * @param \Carbon\Model\HelpdeskFileTypes[]|null $file_types_at_source Filter files based on their type at the source (for example help center tickets and articles)
     *
     * @return self
     */
    public function setFileTypesAtSource($file_types_at_source)
    {

        if (is_null($file_types_at_source)) {
            array_push($this->openAPINullablesSetToNull, 'file_types_at_source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('file_types_at_source', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['file_types_at_source'] = $file_types_at_source;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


