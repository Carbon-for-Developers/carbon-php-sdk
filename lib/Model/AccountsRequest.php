<?php
/**
 * AccountsRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Carbon
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * Carbon
 *
 * Connect external data to LLMs, no matter the source.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Carbon\Model;

use \ArrayAccess;
use \Carbon\ObjectSerializer;

/**
 * AccountsRequest Class Doc Comment
 *
 * @category Class
 * @package  Carbon
 * @implements \ArrayAccess<string, mixed>
 */
class AccountsRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'data_source_id' => 'int',
        'include_remote_data' => 'bool',
        'next_cursor' => 'string',
        'page_size' => 'int',
        'order_dir' => '\Carbon\Model\OrderDirV2Nullable',
        'includes' => '\Carbon\Model\BaseIncludes[]',
        'filters' => '\Carbon\Model\AccountFilters',
        'order_by' => '\Carbon\Model\AccountsOrderByNullable'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'data_source_id' => null,
        'include_remote_data' => null,
        'next_cursor' => null,
        'page_size' => null,
        'order_dir' => null,
        'includes' => null,
        'filters' => null,
        'order_by' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'data_source_id' => false,
		'include_remote_data' => false,
		'next_cursor' => true,
		'page_size' => true,
		'order_dir' => true,
		'includes' => false,
		'filters' => false,
		'order_by' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'data_source_id' => 'data_source_id',
        'include_remote_data' => 'include_remote_data',
        'next_cursor' => 'next_cursor',
        'page_size' => 'page_size',
        'order_dir' => 'order_dir',
        'includes' => 'includes',
        'filters' => 'filters',
        'order_by' => 'order_by'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'data_source_id' => 'setDataSourceId',
        'include_remote_data' => 'setIncludeRemoteData',
        'next_cursor' => 'setNextCursor',
        'page_size' => 'setPageSize',
        'order_dir' => 'setOrderDir',
        'includes' => 'setIncludes',
        'filters' => 'setFilters',
        'order_by' => 'setOrderBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'data_source_id' => 'getDataSourceId',
        'include_remote_data' => 'getIncludeRemoteData',
        'next_cursor' => 'getNextCursor',
        'page_size' => 'getPageSize',
        'order_dir' => 'getOrderDir',
        'includes' => 'getIncludes',
        'filters' => 'getFilters',
        'order_by' => 'getOrderBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('data_source_id', $data ?? [], null);
        $this->setIfExists('include_remote_data', $data ?? [], false);
        $this->setIfExists('next_cursor', $data ?? [], null);
        $this->setIfExists('page_size', $data ?? [], null);
        $this->setIfExists('order_dir', $data ?? [], null);
        $this->setIfExists('includes', $data ?? [], null);
        $this->setIfExists('filters', $data ?? [], null);
        $this->setIfExists('order_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['data_source_id'] === null) {
            $invalidProperties[] = "'data_source_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets data_source_id
     *
     * @return int
     */
    public function getDataSourceId()
    {
        return $this->container['data_source_id'];
    }

    /**
     * Sets data_source_id
     *
     * @param int $data_source_id data_source_id
     *
     * @return self
     */
    public function setDataSourceId($data_source_id)
    {

        if (is_null($data_source_id)) {
            throw new \InvalidArgumentException('non-nullable data_source_id cannot be null');
        }

        $this->container['data_source_id'] = $data_source_id;

        return $this;
    }

    /**
     * Gets include_remote_data
     *
     * @return bool|null
     */
    public function getIncludeRemoteData()
    {
        return $this->container['include_remote_data'];
    }

    /**
     * Sets include_remote_data
     *
     * @param bool|null $include_remote_data include_remote_data
     *
     * @return self
     */
    public function setIncludeRemoteData($include_remote_data)
    {

        if (is_null($include_remote_data)) {
            throw new \InvalidArgumentException('non-nullable include_remote_data cannot be null');
        }

        $this->container['include_remote_data'] = $include_remote_data;

        return $this;
    }

    /**
     * Gets next_cursor
     *
     * @return string|null
     */
    public function getNextCursor()
    {
        return $this->container['next_cursor'];
    }

    /**
     * Sets next_cursor
     *
     * @param string|null $next_cursor next_cursor
     *
     * @return self
     */
    public function setNextCursor($next_cursor)
    {

        if (is_null($next_cursor)) {
            array_push($this->openAPINullablesSetToNull, 'next_cursor');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('next_cursor', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['next_cursor'] = $next_cursor;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int|null
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int|null $page_size page_size
     *
     * @return self
     */
    public function setPageSize($page_size)
    {

        if (is_null($page_size)) {
            array_push($this->openAPINullablesSetToNull, 'page_size');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('page_size', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets order_dir
     *
     * @return \Carbon\Model\OrderDirV2Nullable|null
     */
    public function getOrderDir()
    {
        return $this->container['order_dir'];
    }

    /**
     * Sets order_dir
     *
     * @param \Carbon\Model\OrderDirV2Nullable|null $order_dir order_dir
     *
     * @return self
     */
    public function setOrderDir($order_dir)
    {

        if (is_null($order_dir)) {
            array_push($this->openAPINullablesSetToNull, 'order_dir');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_dir', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['order_dir'] = $order_dir;

        return $this;
    }

    /**
     * Gets includes
     *
     * @return \Carbon\Model\BaseIncludes[]|null
     */
    public function getIncludes()
    {
        return $this->container['includes'];
    }

    /**
     * Sets includes
     *
     * @param \Carbon\Model\BaseIncludes[]|null $includes includes
     *
     * @return self
     */
    public function setIncludes($includes)
    {

        if (is_null($includes)) {
            throw new \InvalidArgumentException('non-nullable includes cannot be null');
        }

        $this->container['includes'] = $includes;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return \Carbon\Model\AccountFilters|null
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param \Carbon\Model\AccountFilters|null $filters filters
     *
     * @return self
     */
    public function setFilters($filters)
    {

        if (is_null($filters)) {
            throw new \InvalidArgumentException('non-nullable filters cannot be null');
        }

        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets order_by
     *
     * @return \Carbon\Model\AccountsOrderByNullable|null
     */
    public function getOrderBy()
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param \Carbon\Model\AccountsOrderByNullable|null $order_by order_by
     *
     * @return self
     */
    public function setOrderBy($order_by)
    {

        if (is_null($order_by)) {
            array_push($this->openAPINullablesSetToNull, 'order_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['order_by'] = $order_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


