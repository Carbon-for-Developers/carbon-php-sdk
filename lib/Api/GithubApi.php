<?php
/**
 * GithubApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Carbon
 * @author   Konfig
 * @link     https://konfigthis.com
 */

/**
 * Carbon
 *
 * Connect external data to LLMs, no matter the source.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://konfigthis.com
 */


namespace Carbon\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\BodySummarizer;
use GuzzleHttp\Middleware;
use GuzzleHttp\HandlerStack;
use GuzzleHttp\Utils;
use Carbon\ApiException;
use Carbon\Configuration;
use Carbon\HeaderSelector;
use Carbon\ObjectSerializer;

class GithubApi extends \Carbon\CustomApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getIssue' => [
            'application/json',
        ],
        'getIssues' => [
            'application/json',
        ],
        'getPr' => [
            'application/json',
        ],
        'getPrComments' => [
            'application/json',
        ],
        'getPrCommits' => [
            'application/json',
        ],
        'getPrFiles' => [
            'application/json',
        ],
        'getPullRequests' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        Configuration $config = null,
        ClientInterface $client = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $clientOptions = [];
        if (!$config->getVerifySsl()) $clientOptions["verify"] = false;

        // Do not truncate error messages
        // https://github.com/guzzle/guzzle/issues/2185#issuecomment-800293420
        $stack = new HandlerStack(Utils::chooseHandler());
        $stack->push(Middleware::httpErrors(new BodySummarizer(10000)), 'http_errors');
        $stack->push(Middleware::redirect(), 'allow_redirects');
        $stack->push(Middleware::cookies(), 'cookies');
        $stack->push(Middleware::prepareBody(), 'prepare_body');
        $clientOptions["handler"] = $stack;

        $this->client = $client ?: new Client($clientOptions);
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * For initializing request body parameter
     */
    private function setRequestBodyProperty(&$body, $property, $value) {
        if ($body === null) $body = [];
        // user did not pass in a value for this parameter
        if ($value === SENTINEL_VALUE) return;
        $body[$property] = $value;
    }

    /**
     * Operation getIssue
     *
     * Issue
     *
     * @param  int $issue_number issue_number (required)
     * @param  bool $include_remote_data include_remote_data (optional, default to false)
     * @param  int $data_source_id data_source_id (optional)
     * @param  string $repository repository (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIssue'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\Issue|\Carbon\Model\HTTPValidationError
     */
    public function getIssue(
        $issue_number,
        $include_remote_data = false,
        $data_source_id = SENTINEL_VALUE,
        $repository = SENTINEL_VALUE,

        string $contentType = self::contentTypes['getIssue'][0]
    )
    {

        list($response) = $this->getIssueWithHttpInfo($issue_number, $include_remote_data, $data_source_id, $repository, $contentType);
        return $response;
    }

    /**
     * Operation getIssueWithHttpInfo
     *
     * Issue
     *
     * @param  int $issue_number (required)
     * @param  bool $include_remote_data (optional, default to false)
     * @param  int $data_source_id (optional)
     * @param  string $repository (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIssue'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\Issue|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIssueWithHttpInfo($issue_number, $include_remote_data = false, $data_source_id = null, $repository = null, string $contentType = self::contentTypes['getIssue'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->getIssueRequest($issue_number, $include_remote_data, $data_source_id, $repository, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->getIssueWithHttpInfo(
                        $issue_number,
                        $include_remote_data,
                        $data_source_id,
                        $repository,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\Issue' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\Issue' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\Issue', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\Issue';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\Issue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIssueAsync
     *
     * Issue
     *
     * @param  int $issue_number (required)
     * @param  bool $include_remote_data (optional, default to false)
     * @param  int $data_source_id (optional)
     * @param  string $repository (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIssue'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIssueAsync(
        $issue_number,
        $include_remote_data = false,
        $data_source_id = SENTINEL_VALUE,
        $repository = SENTINEL_VALUE,

        string $contentType = self::contentTypes['getIssue'][0]
    )
    {

        return $this->getIssueAsyncWithHttpInfo($issue_number, $include_remote_data, $data_source_id, $repository, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIssueAsyncWithHttpInfo
     *
     * Issue
     *
     * @param  int $issue_number (required)
     * @param  bool $include_remote_data (optional, default to false)
     * @param  int $data_source_id (optional)
     * @param  string $repository (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIssue'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIssueAsyncWithHttpInfo($issue_number, $include_remote_data = false, $data_source_id = null, $repository = null, string $contentType = self::contentTypes['getIssue'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\Issue';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->getIssueRequest($issue_number, $include_remote_data, $data_source_id, $repository, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIssue'
     *
     * @param  int $issue_number (required)
     * @param  bool $include_remote_data (optional, default to false)
     * @param  int $data_source_id (optional)
     * @param  string $repository (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIssue'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getIssueRequest($issue_number, $include_remote_data = false, $data_source_id = SENTINEL_VALUE, $repository = SENTINEL_VALUE, string $contentType = self::contentTypes['getIssue'][0])
    {

        // verify the required parameter 'issue_number' is set
        if ($issue_number === SENTINEL_VALUE || (is_array($issue_number) && count($issue_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter issue_number when calling getIssue'
            );
        }
        // Check if $repository is a string
        if ($repository !== SENTINEL_VALUE && !is_string($repository)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($repository, true), gettype($repository)));
        }


        $resourcePath = '/integrations/data/github/issues/{issue_number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($include_remote_data !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $include_remote_data,
                'include_remote_data', // param base name
                'boolean', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? []);
        }
        if ($data_source_id !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $data_source_id,
                'data_source_id', // param base name
                'integer', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? []);
        }
        if ($repository !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $repository,
                'repository', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? []);
        }


        // path params
        if ($issue_number !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'issue_number' . '}',
                ObjectSerializer::toPathValue($issue_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'GET';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation getIssues
     *
     * Issues
     *
     * @param  \Carbon\Model\IssuesInput $issues_input issues_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIssues'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\IssuesResponse|\Carbon\Model\HTTPValidationError
     */
    public function getIssues(

        $data_source_id,
        $repository,
        $include_remote_data = false,
        $page = 1,
        $page_size = 30,
        $next_cursor = SENTINEL_VALUE,
        $filters = SENTINEL_VALUE,
        $order_by = SENTINEL_VALUE,
        $order_dir = SENTINEL_VALUE,
        string $contentType = self::contentTypes['getIssues'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "data_source_id", $data_source_id);
        $this->setRequestBodyProperty($_body, "include_remote_data", $include_remote_data);
        $this->setRequestBodyProperty($_body, "repository", $repository);
        $this->setRequestBodyProperty($_body, "page", $page);
        $this->setRequestBodyProperty($_body, "page_size", $page_size);
        $this->setRequestBodyProperty($_body, "next_cursor", $next_cursor);
        $this->setRequestBodyProperty($_body, "filters", $filters);
        $this->setRequestBodyProperty($_body, "order_by", $order_by);
        $this->setRequestBodyProperty($_body, "order_dir", $order_dir);
        $issues_input = $_body;

        list($response) = $this->getIssuesWithHttpInfo($issues_input, $contentType);
        return $response;
    }

    /**
     * Operation getIssuesWithHttpInfo
     *
     * Issues
     *
     * @param  \Carbon\Model\IssuesInput $issues_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIssues'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\IssuesResponse|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIssuesWithHttpInfo($issues_input, string $contentType = self::contentTypes['getIssues'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->getIssuesRequest($issues_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->getIssuesWithHttpInfo(
                        $issues_input,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\IssuesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\IssuesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\IssuesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\IssuesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\IssuesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIssuesAsync
     *
     * Issues
     *
     * @param  \Carbon\Model\IssuesInput $issues_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIssues'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIssuesAsync(

        $data_source_id,
        $repository,
        $include_remote_data = false,
        $page = 1,
        $page_size = 30,
        $next_cursor = SENTINEL_VALUE,
        $filters = SENTINEL_VALUE,
        $order_by = SENTINEL_VALUE,
        $order_dir = SENTINEL_VALUE,
        string $contentType = self::contentTypes['getIssues'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "data_source_id", $data_source_id);
        $this->setRequestBodyProperty($_body, "include_remote_data", $include_remote_data);
        $this->setRequestBodyProperty($_body, "repository", $repository);
        $this->setRequestBodyProperty($_body, "page", $page);
        $this->setRequestBodyProperty($_body, "page_size", $page_size);
        $this->setRequestBodyProperty($_body, "next_cursor", $next_cursor);
        $this->setRequestBodyProperty($_body, "filters", $filters);
        $this->setRequestBodyProperty($_body, "order_by", $order_by);
        $this->setRequestBodyProperty($_body, "order_dir", $order_dir);
        $issues_input = $_body;

        return $this->getIssuesAsyncWithHttpInfo($issues_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIssuesAsyncWithHttpInfo
     *
     * Issues
     *
     * @param  \Carbon\Model\IssuesInput $issues_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIssues'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIssuesAsyncWithHttpInfo($issues_input, string $contentType = self::contentTypes['getIssues'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\IssuesResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->getIssuesRequest($issues_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIssues'
     *
     * @param  \Carbon\Model\IssuesInput $issues_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getIssues'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getIssuesRequest($issues_input, string $contentType = self::contentTypes['getIssues'][0])
    {

        if ($issues_input !== SENTINEL_VALUE) {
            if (!($issues_input instanceof \Carbon\Model\IssuesInput)) {
                if (!is_array($issues_input))
                    throw new \InvalidArgumentException('"issues_input" must be associative array or an instance of \Carbon\Model\IssuesInput GithubApi.getIssues.');
                else
                    $issues_input = new \Carbon\Model\IssuesInput($issues_input);
            }
        }
        // verify the required parameter 'issues_input' is set
        if ($issues_input === SENTINEL_VALUE || (is_array($issues_input) && count($issues_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter issues_input when calling getIssues'
            );
        }


        $resourcePath = '/integrations/data/github/issues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($issues_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($issues_input));
            } else {
                $httpBody = $issues_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation getPr
     *
     * Get Pr
     *
     * @param  int $pull_number pull_number (required)
     * @param  bool $include_remote_data include_remote_data (optional, default to false)
     * @param  int $data_source_id data_source_id (optional)
     * @param  string $repository repository (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPr'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\PullRequestExtended|\Carbon\Model\HTTPValidationError
     */
    public function getPr(
        $pull_number,
        $include_remote_data = false,
        $data_source_id = SENTINEL_VALUE,
        $repository = SENTINEL_VALUE,

        string $contentType = self::contentTypes['getPr'][0]
    )
    {

        list($response) = $this->getPrWithHttpInfo($pull_number, $include_remote_data, $data_source_id, $repository, $contentType);
        return $response;
    }

    /**
     * Operation getPrWithHttpInfo
     *
     * Get Pr
     *
     * @param  int $pull_number (required)
     * @param  bool $include_remote_data (optional, default to false)
     * @param  int $data_source_id (optional)
     * @param  string $repository (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPr'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\PullRequestExtended|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPrWithHttpInfo($pull_number, $include_remote_data = false, $data_source_id = null, $repository = null, string $contentType = self::contentTypes['getPr'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->getPrRequest($pull_number, $include_remote_data, $data_source_id, $repository, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->getPrWithHttpInfo(
                        $pull_number,
                        $include_remote_data,
                        $data_source_id,
                        $repository,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\PullRequestExtended' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\PullRequestExtended' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\PullRequestExtended', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\PullRequestExtended';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\PullRequestExtended',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPrAsync
     *
     * Get Pr
     *
     * @param  int $pull_number (required)
     * @param  bool $include_remote_data (optional, default to false)
     * @param  int $data_source_id (optional)
     * @param  string $repository (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPr'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPrAsync(
        $pull_number,
        $include_remote_data = false,
        $data_source_id = SENTINEL_VALUE,
        $repository = SENTINEL_VALUE,

        string $contentType = self::contentTypes['getPr'][0]
    )
    {

        return $this->getPrAsyncWithHttpInfo($pull_number, $include_remote_data, $data_source_id, $repository, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPrAsyncWithHttpInfo
     *
     * Get Pr
     *
     * @param  int $pull_number (required)
     * @param  bool $include_remote_data (optional, default to false)
     * @param  int $data_source_id (optional)
     * @param  string $repository (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPr'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPrAsyncWithHttpInfo($pull_number, $include_remote_data = false, $data_source_id = null, $repository = null, string $contentType = self::contentTypes['getPr'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\PullRequestExtended';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->getPrRequest($pull_number, $include_remote_data, $data_source_id, $repository, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPr'
     *
     * @param  int $pull_number (required)
     * @param  bool $include_remote_data (optional, default to false)
     * @param  int $data_source_id (optional)
     * @param  string $repository (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPr'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPrRequest($pull_number, $include_remote_data = false, $data_source_id = SENTINEL_VALUE, $repository = SENTINEL_VALUE, string $contentType = self::contentTypes['getPr'][0])
    {

        // verify the required parameter 'pull_number' is set
        if ($pull_number === SENTINEL_VALUE || (is_array($pull_number) && count($pull_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter pull_number when calling getPr'
            );
        }
        // Check if $repository is a string
        if ($repository !== SENTINEL_VALUE && !is_string($repository)) {
            throw new \InvalidArgumentException(sprintf('Invalid value %s, please provide a string, %s given', var_export($repository, true), gettype($repository)));
        }


        $resourcePath = '/integrations/data/github/pull_requests/{pull_number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($include_remote_data !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $include_remote_data,
                'include_remote_data', // param base name
                'boolean', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? []);
        }
        if ($data_source_id !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $data_source_id,
                'data_source_id', // param base name
                'integer', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? []);
        }
        if ($repository !== SENTINEL_VALUE) {
            // query params
            $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
                $repository,
                'repository', // param base name
                'string', // openApiType
                'form', // style
                true, // explode
                false // required
            ) ?? []);
        }


        // path params
        if ($pull_number !== SENTINEL_VALUE) {
            $resourcePath = str_replace(
                '{' . 'pull_number' . '}',
                ObjectSerializer::toPathValue($pull_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'GET';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation getPrComments
     *
     * Pr Comments
     *
     * @param  \Carbon\Model\CommentsInput $comments_input comments_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPrComments'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\CommentsResponse|\Carbon\Model\HTTPValidationError
     */
    public function getPrComments(

        $data_source_id,
        $repository,
        $pull_number,
        $include_remote_data = false,
        $page = 1,
        $page_size = 30,
        $next_cursor = SENTINEL_VALUE,
        $order_by = SENTINEL_VALUE,
        $order_dir = SENTINEL_VALUE,
        string $contentType = self::contentTypes['getPrComments'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "data_source_id", $data_source_id);
        $this->setRequestBodyProperty($_body, "include_remote_data", $include_remote_data);
        $this->setRequestBodyProperty($_body, "repository", $repository);
        $this->setRequestBodyProperty($_body, "page", $page);
        $this->setRequestBodyProperty($_body, "page_size", $page_size);
        $this->setRequestBodyProperty($_body, "next_cursor", $next_cursor);
        $this->setRequestBodyProperty($_body, "pull_number", $pull_number);
        $this->setRequestBodyProperty($_body, "order_by", $order_by);
        $this->setRequestBodyProperty($_body, "order_dir", $order_dir);
        $comments_input = $_body;

        list($response) = $this->getPrCommentsWithHttpInfo($comments_input, $contentType);
        return $response;
    }

    /**
     * Operation getPrCommentsWithHttpInfo
     *
     * Pr Comments
     *
     * @param  \Carbon\Model\CommentsInput $comments_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPrComments'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\CommentsResponse|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPrCommentsWithHttpInfo($comments_input, string $contentType = self::contentTypes['getPrComments'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->getPrCommentsRequest($comments_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->getPrCommentsWithHttpInfo(
                        $comments_input,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\CommentsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\CommentsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\CommentsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\CommentsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\CommentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPrCommentsAsync
     *
     * Pr Comments
     *
     * @param  \Carbon\Model\CommentsInput $comments_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPrComments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPrCommentsAsync(

        $data_source_id,
        $repository,
        $pull_number,
        $include_remote_data = false,
        $page = 1,
        $page_size = 30,
        $next_cursor = SENTINEL_VALUE,
        $order_by = SENTINEL_VALUE,
        $order_dir = SENTINEL_VALUE,
        string $contentType = self::contentTypes['getPrComments'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "data_source_id", $data_source_id);
        $this->setRequestBodyProperty($_body, "include_remote_data", $include_remote_data);
        $this->setRequestBodyProperty($_body, "repository", $repository);
        $this->setRequestBodyProperty($_body, "page", $page);
        $this->setRequestBodyProperty($_body, "page_size", $page_size);
        $this->setRequestBodyProperty($_body, "next_cursor", $next_cursor);
        $this->setRequestBodyProperty($_body, "pull_number", $pull_number);
        $this->setRequestBodyProperty($_body, "order_by", $order_by);
        $this->setRequestBodyProperty($_body, "order_dir", $order_dir);
        $comments_input = $_body;

        return $this->getPrCommentsAsyncWithHttpInfo($comments_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPrCommentsAsyncWithHttpInfo
     *
     * Pr Comments
     *
     * @param  \Carbon\Model\CommentsInput $comments_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPrComments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPrCommentsAsyncWithHttpInfo($comments_input, string $contentType = self::contentTypes['getPrComments'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\CommentsResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->getPrCommentsRequest($comments_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPrComments'
     *
     * @param  \Carbon\Model\CommentsInput $comments_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPrComments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPrCommentsRequest($comments_input, string $contentType = self::contentTypes['getPrComments'][0])
    {

        if ($comments_input !== SENTINEL_VALUE) {
            if (!($comments_input instanceof \Carbon\Model\CommentsInput)) {
                if (!is_array($comments_input))
                    throw new \InvalidArgumentException('"comments_input" must be associative array or an instance of \Carbon\Model\CommentsInput GithubApi.getPrComments.');
                else
                    $comments_input = new \Carbon\Model\CommentsInput($comments_input);
            }
        }
        // verify the required parameter 'comments_input' is set
        if ($comments_input === SENTINEL_VALUE || (is_array($comments_input) && count($comments_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter comments_input when calling getPrComments'
            );
        }


        $resourcePath = '/integrations/data/github/pull_requests/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($comments_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($comments_input));
            } else {
                $httpBody = $comments_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation getPrCommits
     *
     * Pr Commits
     *
     * @param  \Carbon\Model\CommitsInput $commits_input commits_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPrCommits'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\CommitsResponse|\Carbon\Model\HTTPValidationError
     */
    public function getPrCommits(

        $data_source_id,
        $repository,
        $pull_number,
        $include_remote_data = false,
        $page = 1,
        $page_size = 30,
        $next_cursor = SENTINEL_VALUE,
        string $contentType = self::contentTypes['getPrCommits'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "data_source_id", $data_source_id);
        $this->setRequestBodyProperty($_body, "include_remote_data", $include_remote_data);
        $this->setRequestBodyProperty($_body, "repository", $repository);
        $this->setRequestBodyProperty($_body, "page", $page);
        $this->setRequestBodyProperty($_body, "page_size", $page_size);
        $this->setRequestBodyProperty($_body, "next_cursor", $next_cursor);
        $this->setRequestBodyProperty($_body, "pull_number", $pull_number);
        $commits_input = $_body;

        list($response) = $this->getPrCommitsWithHttpInfo($commits_input, $contentType);
        return $response;
    }

    /**
     * Operation getPrCommitsWithHttpInfo
     *
     * Pr Commits
     *
     * @param  \Carbon\Model\CommitsInput $commits_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPrCommits'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\CommitsResponse|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPrCommitsWithHttpInfo($commits_input, string $contentType = self::contentTypes['getPrCommits'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->getPrCommitsRequest($commits_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->getPrCommitsWithHttpInfo(
                        $commits_input,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\CommitsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\CommitsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\CommitsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\CommitsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\CommitsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPrCommitsAsync
     *
     * Pr Commits
     *
     * @param  \Carbon\Model\CommitsInput $commits_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPrCommits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPrCommitsAsync(

        $data_source_id,
        $repository,
        $pull_number,
        $include_remote_data = false,
        $page = 1,
        $page_size = 30,
        $next_cursor = SENTINEL_VALUE,
        string $contentType = self::contentTypes['getPrCommits'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "data_source_id", $data_source_id);
        $this->setRequestBodyProperty($_body, "include_remote_data", $include_remote_data);
        $this->setRequestBodyProperty($_body, "repository", $repository);
        $this->setRequestBodyProperty($_body, "page", $page);
        $this->setRequestBodyProperty($_body, "page_size", $page_size);
        $this->setRequestBodyProperty($_body, "next_cursor", $next_cursor);
        $this->setRequestBodyProperty($_body, "pull_number", $pull_number);
        $commits_input = $_body;

        return $this->getPrCommitsAsyncWithHttpInfo($commits_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPrCommitsAsyncWithHttpInfo
     *
     * Pr Commits
     *
     * @param  \Carbon\Model\CommitsInput $commits_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPrCommits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPrCommitsAsyncWithHttpInfo($commits_input, string $contentType = self::contentTypes['getPrCommits'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\CommitsResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->getPrCommitsRequest($commits_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPrCommits'
     *
     * @param  \Carbon\Model\CommitsInput $commits_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPrCommits'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPrCommitsRequest($commits_input, string $contentType = self::contentTypes['getPrCommits'][0])
    {

        if ($commits_input !== SENTINEL_VALUE) {
            if (!($commits_input instanceof \Carbon\Model\CommitsInput)) {
                if (!is_array($commits_input))
                    throw new \InvalidArgumentException('"commits_input" must be associative array or an instance of \Carbon\Model\CommitsInput GithubApi.getPrCommits.');
                else
                    $commits_input = new \Carbon\Model\CommitsInput($commits_input);
            }
        }
        // verify the required parameter 'commits_input' is set
        if ($commits_input === SENTINEL_VALUE || (is_array($commits_input) && count($commits_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter commits_input when calling getPrCommits'
            );
        }


        $resourcePath = '/integrations/data/github/pull_requests/commits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($commits_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($commits_input));
            } else {
                $httpBody = $commits_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation getPrFiles
     *
     * Pr Files
     *
     * @param  \Carbon\Model\FilesInput $files_input files_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPrFiles'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\FilesResponse|\Carbon\Model\HTTPValidationError
     */
    public function getPrFiles(

        $data_source_id,
        $repository,
        $pull_number,
        $include_remote_data = false,
        $page = 1,
        $page_size = 30,
        $next_cursor = SENTINEL_VALUE,
        string $contentType = self::contentTypes['getPrFiles'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "data_source_id", $data_source_id);
        $this->setRequestBodyProperty($_body, "include_remote_data", $include_remote_data);
        $this->setRequestBodyProperty($_body, "repository", $repository);
        $this->setRequestBodyProperty($_body, "page", $page);
        $this->setRequestBodyProperty($_body, "page_size", $page_size);
        $this->setRequestBodyProperty($_body, "next_cursor", $next_cursor);
        $this->setRequestBodyProperty($_body, "pull_number", $pull_number);
        $files_input = $_body;

        list($response) = $this->getPrFilesWithHttpInfo($files_input, $contentType);
        return $response;
    }

    /**
     * Operation getPrFilesWithHttpInfo
     *
     * Pr Files
     *
     * @param  \Carbon\Model\FilesInput $files_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPrFiles'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\FilesResponse|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPrFilesWithHttpInfo($files_input, string $contentType = self::contentTypes['getPrFiles'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->getPrFilesRequest($files_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->getPrFilesWithHttpInfo(
                        $files_input,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\FilesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\FilesResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\FilesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\FilesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\FilesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPrFilesAsync
     *
     * Pr Files
     *
     * @param  \Carbon\Model\FilesInput $files_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPrFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPrFilesAsync(

        $data_source_id,
        $repository,
        $pull_number,
        $include_remote_data = false,
        $page = 1,
        $page_size = 30,
        $next_cursor = SENTINEL_VALUE,
        string $contentType = self::contentTypes['getPrFiles'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "data_source_id", $data_source_id);
        $this->setRequestBodyProperty($_body, "include_remote_data", $include_remote_data);
        $this->setRequestBodyProperty($_body, "repository", $repository);
        $this->setRequestBodyProperty($_body, "page", $page);
        $this->setRequestBodyProperty($_body, "page_size", $page_size);
        $this->setRequestBodyProperty($_body, "next_cursor", $next_cursor);
        $this->setRequestBodyProperty($_body, "pull_number", $pull_number);
        $files_input = $_body;

        return $this->getPrFilesAsyncWithHttpInfo($files_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPrFilesAsyncWithHttpInfo
     *
     * Pr Files
     *
     * @param  \Carbon\Model\FilesInput $files_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPrFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPrFilesAsyncWithHttpInfo($files_input, string $contentType = self::contentTypes['getPrFiles'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\FilesResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->getPrFilesRequest($files_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPrFiles'
     *
     * @param  \Carbon\Model\FilesInput $files_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPrFiles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPrFilesRequest($files_input, string $contentType = self::contentTypes['getPrFiles'][0])
    {

        if ($files_input !== SENTINEL_VALUE) {
            if (!($files_input instanceof \Carbon\Model\FilesInput)) {
                if (!is_array($files_input))
                    throw new \InvalidArgumentException('"files_input" must be associative array or an instance of \Carbon\Model\FilesInput GithubApi.getPrFiles.');
                else
                    $files_input = new \Carbon\Model\FilesInput($files_input);
            }
        }
        // verify the required parameter 'files_input' is set
        if ($files_input === SENTINEL_VALUE || (is_array($files_input) && count($files_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter files_input when calling getPrFiles'
            );
        }


        $resourcePath = '/integrations/data/github/pull_requests/files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($files_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($files_input));
            } else {
                $httpBody = $files_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Operation getPullRequests
     *
     * Get Prs
     *
     * @param  \Carbon\Model\PullRequestsInput $pull_requests_input pull_requests_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPullRequests'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Carbon\Model\PullRequestResponse|\Carbon\Model\HTTPValidationError
     */
    public function getPullRequests(

        $data_source_id,
        $repository,
        $include_remote_data = false,
        $page = 1,
        $page_size = 30,
        $next_cursor = SENTINEL_VALUE,
        $filters = SENTINEL_VALUE,
        $order_by = SENTINEL_VALUE,
        $order_dir = SENTINEL_VALUE,
        string $contentType = self::contentTypes['getPullRequests'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "data_source_id", $data_source_id);
        $this->setRequestBodyProperty($_body, "include_remote_data", $include_remote_data);
        $this->setRequestBodyProperty($_body, "repository", $repository);
        $this->setRequestBodyProperty($_body, "page", $page);
        $this->setRequestBodyProperty($_body, "page_size", $page_size);
        $this->setRequestBodyProperty($_body, "next_cursor", $next_cursor);
        $this->setRequestBodyProperty($_body, "filters", $filters);
        $this->setRequestBodyProperty($_body, "order_by", $order_by);
        $this->setRequestBodyProperty($_body, "order_dir", $order_dir);
        $pull_requests_input = $_body;

        list($response) = $this->getPullRequestsWithHttpInfo($pull_requests_input, $contentType);
        return $response;
    }

    /**
     * Operation getPullRequestsWithHttpInfo
     *
     * Get Prs
     *
     * @param  \Carbon\Model\PullRequestsInput $pull_requests_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPullRequests'] to see the possible values for this operation
     *
     * @throws \Carbon\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Carbon\Model\PullRequestResponse|\Carbon\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPullRequestsWithHttpInfo($pull_requests_input, string $contentType = self::contentTypes['getPullRequests'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        ["request" => $request, "serializedBody" => $serializedBody] = $this->getPullRequestsRequest($pull_requests_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                if (
                    ($e->getCode() == 401 || $e->getCode() == 403) &&
                    !empty($this->getConfig()->getAccessToken()) &&
                    $requestOptions->shouldRetryOAuth()
                ) {
                    return $this->getPullRequestsWithHttpInfo(
                        $pull_requests_input,
                        $contentType,
                        $requestOptions->setRetryOAuth(false)
                    );
                }

                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Carbon\Model\PullRequestResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\PullRequestResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\PullRequestResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\Carbon\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Carbon\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Carbon\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Carbon\Model\PullRequestResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\PullRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Carbon\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPullRequestsAsync
     *
     * Get Prs
     *
     * @param  \Carbon\Model\PullRequestsInput $pull_requests_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPullRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPullRequestsAsync(

        $data_source_id,
        $repository,
        $include_remote_data = false,
        $page = 1,
        $page_size = 30,
        $next_cursor = SENTINEL_VALUE,
        $filters = SENTINEL_VALUE,
        $order_by = SENTINEL_VALUE,
        $order_dir = SENTINEL_VALUE,
        string $contentType = self::contentTypes['getPullRequests'][0]
    )
    {
        $_body = [];
        $this->setRequestBodyProperty($_body, "data_source_id", $data_source_id);
        $this->setRequestBodyProperty($_body, "include_remote_data", $include_remote_data);
        $this->setRequestBodyProperty($_body, "repository", $repository);
        $this->setRequestBodyProperty($_body, "page", $page);
        $this->setRequestBodyProperty($_body, "page_size", $page_size);
        $this->setRequestBodyProperty($_body, "next_cursor", $next_cursor);
        $this->setRequestBodyProperty($_body, "filters", $filters);
        $this->setRequestBodyProperty($_body, "order_by", $order_by);
        $this->setRequestBodyProperty($_body, "order_dir", $order_dir);
        $pull_requests_input = $_body;

        return $this->getPullRequestsAsyncWithHttpInfo($pull_requests_input, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPullRequestsAsyncWithHttpInfo
     *
     * Get Prs
     *
     * @param  \Carbon\Model\PullRequestsInput $pull_requests_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPullRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPullRequestsAsyncWithHttpInfo($pull_requests_input, string $contentType = self::contentTypes['getPullRequests'][0], \Carbon\RequestOptions $requestOptions = new \Carbon\RequestOptions())
    {
        $returnType = '\Carbon\Model\PullRequestResponse';
        ["request" => $request, "serializedBody" => $serializedBody] = $this->getPullRequestsRequest($pull_requests_input, $contentType);

        // Customization hook
        $this->beforeSendHook($request, $requestOptions, $this->config, $serializedBody);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPullRequests'
     *
     * @param  \Carbon\Model\PullRequestsInput $pull_requests_input (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPullRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPullRequestsRequest($pull_requests_input, string $contentType = self::contentTypes['getPullRequests'][0])
    {

        if ($pull_requests_input !== SENTINEL_VALUE) {
            if (!($pull_requests_input instanceof \Carbon\Model\PullRequestsInput)) {
                if (!is_array($pull_requests_input))
                    throw new \InvalidArgumentException('"pull_requests_input" must be associative array or an instance of \Carbon\Model\PullRequestsInput GithubApi.getPullRequests.');
                else
                    $pull_requests_input = new \Carbon\Model\PullRequestsInput($pull_requests_input);
            }
        }
        // verify the required parameter 'pull_requests_input' is set
        if ($pull_requests_input === SENTINEL_VALUE || (is_array($pull_requests_input) && count($pull_requests_input) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter pull_requests_input when calling getPullRequests'
            );
        }


        $resourcePath = '/integrations/data/github/pull_requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($pull_requests_input)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($pull_requests_input));
            } else {
                $httpBody = $pull_requests_input;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('accessToken');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('apiKey');
        if ($apiKey !== null) {
            $headers['authorization'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('customerId');
        if ($apiKey !== null) {
            $headers['customer-id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $method = 'POST';
        $this->beforeCreateRequestHook($method, $resourcePath, $queryParams, $headers, $httpBody);

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return [
            "request" => new Request(
                $method,
                $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
                $headers,
                $httpBody
            ),
            "serializedBody" => $httpBody
        ];
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
